#include "s21_tests.h"
#include "float.h"

#suite sprintf
#test simple_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "This is ret_res simple value %d";
    int val = 17;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test precise_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.5i";
    int val = 17;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test width_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%5d";
    int val = 17;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);;
    ck_assert_int_eq(ret_exp, ret_res);


#test minus_width_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%-5i";
    int val = 17;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test plus_width_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%+12d";
    int val = 17;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test padding_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%012i";
    int val = 17;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


/* Undefind behaviour
test star_width_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%0*d";
    int val = 17;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);
*/


#test star_precision_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%0.*i";
    int val = 17;

    int ret_exp = sprintf(exp, format, 5, val);
    int ret_res = s21_sprintf(res, format, 5, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_flags_many_ints
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%0.*i %d %4.*i %013d %d";
    int val = 17;

    int ret_exp = sprintf(exp, format, 5, val, -10431, 13, 5311, 0, -581813581);
    int ret_res = s21_sprintf(res, format, 5, val, -10431, 13, 5311, 0, -581813581);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test flags_long_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%+5.31li";
    long int val = 178518581899;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test flags_short_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%-16.9hi";
    short int val = 1758;
    
    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test flags_another_long_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%0.*ld";
    long val = 8581385185;

    int ret_exp = sprintf(exp, format, 5, val);
    int ret_res = s21_sprintf(res, format, 5, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test zero_precision_zero_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.0d";
    int val = 0;
    
    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test space_flag_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "% d";
    int val = 0;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test unsigned_val
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%u";
    unsigned int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test unsigned_val_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%15u";
    unsigned int val = 14140;

    int ret_res = s21_sprintf(res, format, val);
    int ret_exp = sprintf(exp, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test unsigned_val_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%-16u";
    unsigned int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test unsigned_val_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.51u";
    unsigned int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test unsigned_val_many_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "% 5.51u";
    unsigned int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test unsigned_val_short
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%hu";
    unsigned short int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test unsigned_val_long
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%lu";
    unsigned long int val = 949149114140;

    int ret_res = s21_sprintf(res, format, val);
    int ret_exp = sprintf(exp, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test unsigned_val_many
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%lu, %u, %hu, %.5u, %5.u";
    unsigned long int val = 949149114140;

    int ret_exp = sprintf(exp, format, val, (unsigned)14, (unsigned short)1441, (unsigned)14414, (unsigned)9681);
    int ret_res = s21_sprintf(res, format, val, 14, 1441, 14414, 9681);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%15o";
    int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%-16o";
    int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.51o";
    int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal_many_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%-5.51o";
    int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal_zero
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    char *format = "%o";
    int ret_exp = sprintf(exp, format, 0);
    int ret_res = s21_sprintf(res, format, 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal_hash
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#o";
    int val = 57175;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal_short
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%hd";
    short int val = 14140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal_long
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%lo";
    long int val = 949149114140;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal_many
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%lo, %o, %ho, %.5o, %5.o";
    long int val = 949149114140;

    int ret_exp = sprintf(exp, format, val, (unsigned)14, (unsigned short)1441, (unsigned)14414, (unsigned)9681);
    int ret_res = s21_sprintf(res, format, val, 14, 1441, 14414, 9681);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test octal
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%lo";
    long int val = 84518;

    int ret_res = s21_sprintf(res, format, val);
    int ret_exp = sprintf(exp, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test unsigned_zero
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%u";

    int ret_exp = sprintf(exp, format, (unsigned)0);
    int ret_res = s21_sprintf(res, format, 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%5x";
    unsigned val = 858158158;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#-10x";
    unsigned val = 858158158;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.15x";
    unsigned val = 858158158;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_many
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#-10x%x%X%#x%#X%5.5x";
    unsigned val = 858158158;

    int ret_exp = sprintf(exp, format, val, val, val, val, val, val);
    int ret_res = s21_sprintf(res, format, val, val, val, val, val, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_many_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#-5.10x";
    unsigned val = 858158158;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_zero
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#x";
    unsigned val = 0;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_huge
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#x";
    unsigned val = 18571;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_short
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#hx";
    unsigned short val = 12352;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_long
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#lx";
    unsigned long val = 18571757371571;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_one_longer_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#2x";
    unsigned val = 1;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test hex_two_longer_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%#30x";
    unsigned val = 1;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_char
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%c";
    char val = 'X';

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.5c";
    char val = 'c';

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "% -5c";
    char val = 'c';

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%15c";
    char val = 'c';

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_many
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%-5.3c%c%c%c%c Hello! ABOBA";
    char val = 'c';

    int ret_exp = sprintf(exp, format, val, 'c', 'a', 'b', 'b');
    int ret_res = s21_sprintf(res, format, val, 'c', 'a', 'b', 'b');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_many_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%-5.3c";
    char val = 'c';

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test string
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%s";
    char *val = "I LOVE STRINGS AND TESTS AND SCHOOL21 NO JOKE";

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test string_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.15s";
    char *val = "I LOVE STRINGS AND TESTS AND SCHOOL21 NO JOKE";

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test string_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%15s";
    char *val = "17 IS MY FAVORITE NUMBER";

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test string_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%-15.9s";
    char *val = "17 IS MY FAVORITE NUMBER";

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test string_long
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%s";
    char *val = "17 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";
    
    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test string_many
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%s%s%s%s";
    char *val = "17 IS MY FAVORITE NUMBER THIS IS SUPPOSED TO BE A VERY LONG STRING";
    char *s1 = "";
    char *s2 = "87418347813748913749871389480913";
    char *s3 = "HAHAABOBASUCKER";

    int ret_exp = sprintf(exp, format, val, s1, s2, s3);
    int ret_res = s21_sprintf(res, format, val, s1, s2, s3);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test ptr
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%p";

    int ret_exp = sprintf(exp, format, format);
    int ret_res = s21_sprintf(res, format, format);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test ptr_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%15p";

    int ret_exp = sprintf(exp, format, format);
    int ret_res = s21_sprintf(res, format, format);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test ptr_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.5p";

    int ret_exp = sprintf(exp, format, format);
    int ret_res = s21_sprintf(res, format, format);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


/* undefined behaviour
test null_ptr
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%p";
    char *ptr = NULL;

    int ret_exp = sprintf(exp, format, ptr);
    int ret_res = s21_sprintf(res, format, ptr);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);
*/

#test string_width_huge
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *val = "kjafdiuhfjahfjdahf";
    char *format = "%120s";

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test n_specifier
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    int ret = 0;
    char *format = "Hello, my sexy little aboba abobushka abobina %n";

    int ret_exp = sprintf(exp, format, &ret);
    int ret_res = s21_sprintf(res, format, &ret);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test float_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%Lf";
    long double val = 513515.131513515151351;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test float_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%10Lf";
    long double val = 15.35;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test float_precision_zero
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.0Lf";
    long double val = 15.35;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test float_precision_empty
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.Lf";
    long double val = 15.35;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);
    

#test float_precision_huge
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.15Lf";
    long double val = 15.35;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test float_precision_huge_negative
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.15Lf";
    long double val = -15.35581134;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test float_huge
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%Lf";
    long double val = 72537572375.1431341;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test float_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "% f";
    float val = 0;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test float_many
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "% .0f %.lf %Lf %f %lf %Lf";
    float val = 0;
    double val1 = 0;
    long double val2 = 3515315.153151;
    float val3 = 5.5;
    double val4 = 9851.51351;
    long double val5 = 95919539159.53151351131;

    int ret_exp = sprintf(exp, format, val, val1, val2, val3, val4, val5);
    int ret_res = s21_sprintf(res, format, val, val1, val2, val3, val4, val5);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test e_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.17Le";
    long double val = 15.35;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test e_precision_zero
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.0Le";
    long double val = 15.35;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test e_precision_empty
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.Le";
    long double val = 15.000009121;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test e_precision_huge
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.15Le";
    long double val = 0.000000000000000123;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test e_precision_huge_negative
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.15Le";
    long double val = -15.35581134;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test e_huge
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%Le";
    long double val = 72537572375.1431341;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test e_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%015E";
    float val = 0;
    
    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test e_width
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%15e";
    float val = 0;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test e_many
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "% .0e %.le %Le %e %le %Le";
    float val = 0;
    double val1 = 0;
    long double val2 = 3515315.153151;
    float val3 = 5.5;
    double val4 = 0.094913941;
    long double val5 = 95919539159.53151351131;

    int ret_exp = sprintf(exp, format, val, val1, val2, val3, val4, val5);
    int ret_res = s21_sprintf(res, format, val, val1, val2, val3, val4, val5);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test E_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%.17LE";
    long double val = 4134121;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test all_empty
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "abc");
    int ret_res = s21_sprintf(res, "abc");
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test empty_format_and_parameters
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "abc");
    int ret_res = s21_sprintf(res, "abc"); 
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_char_2
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%c", '\t');
    int ret_res = s21_sprintf(res, "%c", '\t');
    ck_assert_str_eq(exp, res);ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_char
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%c%c%c%c%c", '\t', '\n', '0', 'S', 's');
    int ret_res = s21_sprintf(res, "%c%c%c%c%c", '\t', '\n', '0', 'S', 's');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_string
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%s", "Drop Sega PLS");
    int ret_res = s21_sprintf(res, "%s", "Drop Sega PLS");
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_string
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%s%s%s%s%s", "Drop", " ", "Sega", " ", "PLS");
    int ret_res = s21_sprintf(res, "%s%s%s%s%s", "Drop", " ", "Sega", " ", "PLS");
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_dec
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%d", 666);
    int ret_res = s21_sprintf(res, "%d", 666); 
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_dec
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%d%d%d%d", -999, 0, 666, -100);
    int ret_res = s21_sprintf(res, "%d%d%d%d", -999, 0, 666, -100);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%i", -0);
    int ret_res = s21_sprintf(res, "%i", -0); 
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_int
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%i%i%i%i", -999, 0, 666, -100);
    int ret_res = s21_sprintf(res, "%i%i%i%i", -999, 0, 666, -100);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_float
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%f", 0.0001);
    int ret_res = s21_sprintf(res, "%f", 0.0001);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_float
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_res = s21_sprintf(res, "%f%f%f%f", -999.666, 0.0001, 666.999, -100.001);
    int ret_exp = sprintf(exp, "%f%f%f%f", -999.666, 0.0001, 666.999, -100.001);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_unsigned_dec
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%u", (unsigned)100);
    int ret_res = s21_sprintf(res, "%u", 100);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_unsigned_dec
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%u%u%u%u", (unsigned)999, (unsigned)0, (unsigned)666, (unsigned)100);
    int ret_res = s21_sprintf(res, "%u%u%u%u", 999, 0, 666, 100);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_char_with_alignment_left
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%8c", '\t');
    int ret_res = s21_sprintf(res, "%8c", '\t');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_char_with_alignment_right
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%-8c", '\t');
    int ret_res = s21_sprintf(res, "%-8c", '\t');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_char_with_alignment
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%3c%-11c%10c%-2c%c", '\t', '\n', '0', 'S', 's');
    int ret_res = s21_sprintf(res, "%3c%-11c%10c%-2c%c", '\t', '\n', '0', 'S', 's');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_lower
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    
    int ret_exp = sprintf(exp, "%x", (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%x", (unsigned)INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%x", 0);
    ret_res = s21_sprintf(res, "%x", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);
    
    ret_exp = sprintf(exp, "%x", INT_MAX);
    ret_res = s21_sprintf(res, "%x", INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_upper
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_res = s21_sprintf(res, "%X", (unsigned)INT_MIN);
    int ret_exp = sprintf(exp, "%X", (unsigned)INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_res = s21_sprintf(res, "%X", 0);
    ret_exp = sprintf(exp, "%x", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%X", INT_MAX);
    ret_res = s21_sprintf(res, "%X", INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_lower
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%x%x%x%x%x", 12340987, 135, 0, -1230, -123213123);
    int ret_res = s21_sprintf(res, "%x%x%x%x%x", 12340987, 135, 0, -1230, -123213123);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_upper
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_res = s21_sprintf(res, "%X%X%X%X%X", 12340987, 135, 0, -1230, -123213123);
    int ret_exp = sprintf(exp, "%X%X%X%X%X", 12340987, 135, 0, -1230, -123213123);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_lower_with_alignment_left
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%-3x", (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%-3x", (unsigned)INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%-3x", 0);
    ret_res = s21_sprintf(res, "%-3x", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%-3x", INT_MAX);
    ret_res = s21_sprintf(res, "%-3x", INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_lower_with_alignment_right
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%13x", (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%13x", (unsigned)INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%13x", 0);
    ret_res = s21_sprintf(res, "%13x", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%13x", INT_MAX);
    ret_res = s21_sprintf(res, "%13x", INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_upper_with_alignment_left
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%-60X", (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%-60X", INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_res = s21_sprintf(res, "%-60X", 0);
    ret_exp = sprintf(exp, "%-60X", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%-60X", INT_MAX);
    ret_res = s21_sprintf(res, "%-60X", INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_upper_with_alignment_right
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%7X", (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%7X", (unsigned)INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%7X", 0);
    ret_res = s21_sprintf(res, "%7X", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);
    
    ret_exp = sprintf(exp, "%7X", INT_MAX);
    ret_res = s21_sprintf(res, "%7X", INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_lower_with_alignment
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_res = s21_sprintf(res, "%2x%-7x%9x%11x%0x", 12340987, 100, 0, 1, -661799);
    int ret_exp = sprintf(exp, "%2x%-7x%9x%11x%0x", 12340987, 100, 0, 1, -661799);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_upper_with_alignment
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%2X%-7X%9X%11X%0X", 12340987, 100, 0, 1, -661799);
    int ret_res = s21_sprintf(res, "%2X%-7X%9X%11X%0X", 12340987, 100, 0, 1, -661799);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_with_hashtag
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%#x", (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%#x", INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%#x", 0);
    ret_res = s21_sprintf(res, "%#x", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%#x", INT_MAX);
    ret_res = s21_sprintf(res, "%#x", INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_upper_with_hashtag
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%#X", (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%#X", INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%#X", 0);
    ret_res = s21_sprintf(res, "%#X", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%#X", INT_MAX);
    ret_res = s21_sprintf(res, "%#X", INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_lower_with_hashtag_and_alignm
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%#x%#x%3x%#32x%#-1x", 87, 1222224535, -13, -0, 123213123);
    int ret_res = s21_sprintf(res, "%#x%#x%3x%#32x%#-1x", 87, 1222224535, -13, -0, 123213123);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_upper_with_hashtag_and_alignm
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_res = s21_sprintf(res, "%#X%#X%3X%#32X%#-1X", 87, 1222224535, -13, -0, 123213123);
    int ret_exp = sprintf(exp, "%#X%#X%3X%#32X%#-1X", 87, 1222224535, -13, -0, 123213123);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_lower_with_width_star
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%*x", 11, (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%*x", 11, INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%*x", 11, 0);
    ret_res = s21_sprintf(res, "%*x", 11, 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%*x", 11, INT_MAX);
    ret_res = s21_sprintf(res, "%*x", 11, INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_upper_with_width_star
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%*X", 11, (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%*X", 11, INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%*X", 11, 0);
    ret_res = s21_sprintf(res, "%*X", 11, 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%*X", 11, INT_MAX);
    ret_res = s21_sprintf(res, "%*X", 11, INT_MAX);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_lower_with_width_star_and_align_and_hashtag
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%#*x%*x%-12x%3x%*x", 9, 127312897, -0, -1, 199, -123978, 3, -1251);
    int ret_res = s21_sprintf(res, "%#*x%*x%-12x%3x%*x", 9, 127312897, 0, -1, 199, -123978, 3, -1251);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_upper_with_width_star
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%#*X%*X%-12X%3X%*X", 9, 127312897, 0, -1, 199, -123978, 3, -1251);
    int ret_res = s21_sprintf(res, "%#*X%*X%-12X%3X%*X", 9, 127312897, 0, -1, 199, -123978, 3, -1251);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_lower_with_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%*.6x", 11, 0);
    int ret_res = s21_sprintf(res, "%*.6x", 11, 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_upper_with_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%*.6X", 11, (unsigned)INT_MIN);
    int ret_res = s21_sprintf(res, "%*.6X", 11, INT_MIN);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_lower_with_precision_and_other
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(
        res, "%#3.*x%#3x%-7.*x%#-1.8x%4.3x%#2.15x%*.*x%*.1x%3x%-1x", 3, 126714,
        4444444, 0, 6423235, 0, 666, 999, 13, 5, 419, 9, 41, -41, 33);
    int ret_res = s21_sprintf(
        exp, "%#3.*x%#3x%-7.*x%#-1.8x%4.3x%#2.15x%*.*x%*.1x%3x%-1x", 3, 126714,
        4444444, 0, 6423235, 0, 666, 999, 13, 5, 419, 9, 41, -41, 33);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test many_hex_upper_with_precision_and_other
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%#3.*X%#3x%-7.*X%#-1.8X%4.3X%#2.15x%*.*X%*.1X%3X%-1X", 3,
        -126714, 4444444, 0, 6423235, 0, 666, 999, 13, 5, -419, 9, 41, -41, 33);
    int ret_res = s21_sprintf(res, "%#3.*X%#3x%-7.*X%#-1.8X%4.3X%#2.15x%*.*X%*.1X%3X%-1X", 3, 
        -126714, 4444444, 0, 6423235, 0, 666, 999, 13, 5, -419, 9, 41, -41, 33);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_lower_with_length
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%hx", (unsigned short)-11);
    int ret_res = s21_sprintf(res, "%hx", -11);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%hx", (unsigned short)0);
    ret_res = s21_sprintf(res, "%hx", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%hx", (unsigned short)11);
    ret_res = s21_sprintf(res, "%hx", 11);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    long unsigned val = INT_MAX;
    ret_exp = sprintf(exp, "%lx", val);
    ret_res = s21_sprintf(res, "%lx", val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    long unsigned v = 0;
    ret_exp = sprintf(exp, "%lx", v);
    ret_res = s21_sprintf(res, "%lx", v); 
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test one_hex_upper_with_length
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];

    int ret_exp = sprintf(exp, "%hx", (unsigned short)-11);
    int ret_res = s21_sprintf(res, "%hx", -11);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%hx", (unsigned short)0);
    ret_res = s21_sprintf(res, "%hx", 0);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    ret_exp = sprintf(exp, "%hx", (unsigned short)11);
    ret_res = s21_sprintf(res, "%hx", 11);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    long unsigned val = INT_MAX;
    ret_res = s21_sprintf(res, "%lx", val);
    ret_exp = sprintf(exp, "%lx", val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);

    long unsigned v = 0;
    ret_res = s21_sprintf(res, "%lx", v);
    ret_exp = sprintf(exp, "%lx", v);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf1
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%10ld";

    int ret_exp = sprintf(exp, format, 1);
    int ret_res = s21_sprintf(res, format, 1);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf2
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%1.1f";

    int ret_exp = sprintf(exp, format, 1.1);
    int ret_res = s21_sprintf(res, format, 1.1);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf3
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%8.3c";

    int ret_exp = sprintf(exp, format, 'a');
    int ret_res = s21_sprintf(res, format, 'a');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf4
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%+5.5d aboba";
    int val = 10000;

    int ret_exp = sprintf(exp, format, val);
    int ret_res = s21_sprintf(res, format, val);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf6
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%7.7f";

    int ret_exp = sprintf(exp, format, 11.123456);
    int ret_res = s21_sprintf(res, format, 11.123456);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf7
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%7.4s";

    int ret_exp = sprintf(exp, format, "aboba floppa");
    int ret_res = s21_sprintf(res, format, "aboba floppa");
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf8
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%6.6u";

    int ret_exp = sprintf(exp, format, 12341151);
    int ret_res = s21_sprintf(res, format, 12341151);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf9
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%li%ld%lu";

    int ret_exp = sprintf(exp, format, 666666666666, 777, 111);
    int ret_res = s21_sprintf(res, format, 666666666666, 777, 111);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf10
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%hi%hd%hu";

    int ret_exp = sprintf(exp, format, 666, -777, 111);
    int ret_res = s21_sprintf(res, format, 666, -777, 111);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf11
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%+li%+lu%+d%+lf";

    int ret_exp = sprintf(exp, format, -123, 321, -5555, -1213.123);
    int ret_res = s21_sprintf(res, format, -123, 321, -5555, -1213.123);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf12
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%-11.11li%-35.5lu%-3.5ld%33.19Lf";
    long double k = 333.33213;

    int ret_res = s21_sprintf(res, format, 66666666666, 5555555555, 44444444444, k);
    int ret_exp = sprintf(exp, format, 66666666666, 5555555555, 44444444444, k);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf14
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "% 0.0li% 0.0lu% 0.0ld % 0.0lf";

    int ret_res = s21_sprintf(res, format, 1, 222, 33333333333, -166513.1232);
    int ret_exp = sprintf(exp, format, 1, 222, 33333333333, -166513.1232);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf15
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "% 0.0hi% 0.0hu% 0.0hd % 0.0hf";

    int ret_res = s21_sprintf(res, format, 1, 222, 33333333333, -166513.1232);
    int ret_exp = sprintf(exp, format, 1, 222, 33333333333, -166513.1232);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf16
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "% c";

    int ret_exp = sprintf(exp, format, 'a');
    int ret_res = s21_sprintf(res, format, 'a');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf17
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "% s";

    int ret_exp = sprintf(exp, format, "aboba likes floppa");
    int ret_res = s21_sprintf(res, format, "aboba likes floppa");
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf18
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "% s% c";

    int ret_exp = sprintf(exp, format, "", 'f');
    int ret_res = s21_sprintf(res, format, "", 'f');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf19
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%210s";

    int ret_exp = sprintf(exp, format, "AHHAHAHA\0AHHAHAHAH");
    int ret_res = s21_sprintf(res, format, "AHHAHAHA\0AHHAHAHAH");
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf20
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%-115s";

    int ret_exp = sprintf(exp, format, "Nick her");
    int ret_res = s21_sprintf(res, format, "Nick her");
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf24
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%+2.1c%+4.2d%+5.4i%+10.2f%+55.55s%+1.1u";

    int ret_exp = sprintf(exp, format, 'f', 21, 42, 666.666,
        "Lorem ipsum dolor sit amet. Aut quam ducimus.", 11);
    int ret_res = s21_sprintf(res, format, 'f', 21, 42, 666.666,
        "Lorem ipsum dolor sit amet. Aut quam ducimus.", 11);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf25
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%.f";

    int ret_exp = sprintf(exp, format, 121.123);
    int ret_res = s21_sprintf(res, format, 121.123);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf26
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%%%c";

    int ret_exp = sprintf(exp, format, 'a');
    int ret_res = s21_sprintf(res, format, 'a');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf27
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "%%%%%%%%%c";

    int ret_exp = sprintf(exp, format, 'a');
    int ret_res = s21_sprintf(res, format, 'a');
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf28
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    int n1;
    int n2;
    
    int ret_res = s21_sprintf(res, "%d%n", 123, &n1);
    int ret_exp = sprintf(exp, "%d%n", 123, &n2);
    ck_assert_int_eq(ret_exp, ret_res);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(n1, n2);


#test sprintf29
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%-.f";

    int ret_exp = sprintf(exp, format, 111.111);
    int ret_res = s21_sprintf(res, format, 111.111);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf30
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%-.1d";

    int ret_exp = sprintf(exp, format, 111);
    int ret_res = s21_sprintf(res, format, 111);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf31
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%e";
    double x = 111;

    int ret_res = s21_sprintf(res, format, x);
    int ret_exp = sprintf(exp, format, x);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf32
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%e%e%e%e";

    int ret_res = s21_sprintf(res, format, 11.111, 222.2222, 666., -555.125);
    int ret_exp = sprintf(exp, format, 11.111, 222.2222, 666., -555.125);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf33
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%Le";
    long double x = 122.1231;

    int ret_res = s21_sprintf(res, format, x);
    int ret_exp = sprintf(exp, format, x);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf35
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%.10e";

    int ret_exp = sprintf(exp, format, 111.184314818);
    int ret_res = s21_sprintf(res, format, 111.184314818);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf36
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%5.3e%3.2e%lf";

    int ret_exp = sprintf(exp, format, 0.000111, 111.555, 1.999);
    int ret_res = s21_sprintf(res, format, 0.000111, 111.555, 1.999);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf37
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%E";

    int ret_exp = sprintf(exp, format, 0.666666);
    int ret_res = s21_sprintf(res, format, 0.666666);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf38
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%E%E%E";

    int ret_exp = sprintf(exp, format, 0.0000999, 111.9999, 6.666);
    int ret_res = s21_sprintf(res, format, 0.0000999, 111.9999, 6.666);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf39
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%e ABOBA %Lf %Lf %Le";
    long double a = 0.00000001;
    long double b = 1111111.11;
    long double c = 848181;

    int ret_exp = sprintf(exp, format, 123.123, a, b, c);
    int ret_res = s21_sprintf(res, format, 123.123, a, b, c);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf40
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%#e Floppa %#E%#f";

    int ret_exp = sprintf(exp, format, 123.111, 0.0000999, 0.555);
    int ret_res = s21_sprintf(res, format, 123.111, 0.0000999, 0.555);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf41
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%.Lf";
    long double a = 7.9418438184;

    int ret_exp = sprintf(exp, format, a);
    int ret_res = s21_sprintf(res, format, a);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf42
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%#5p";
    int value = 5;
    
    int ret_exp = sprintf(exp, format, &value);
    int ret_res = s21_sprintf(res, format, &value);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf43
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%.5o";

    int ret_exp = sprintf(exp, format, 12345);
    int ret_res = s21_sprintf(res, format, 12345);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test sprintf44
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%#5lX";
    long hex = 314818438141;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_trailing_zero
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%g";
    double hex = 0.50300;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_large
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%g";
    double hex = 5131.43141;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_small
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%g";
    double hex = 0.123000;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_precision
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%.5g";
    double hex = 0.123000;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_precision_zero
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%.0g";
    double hex = 0.123000;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_precision_missing
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%.g";
    double hex = 0.123000;
    
    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_many_zeroes_in_front
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%.g";
    double hex = 0.0004;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_one_zero
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%g";
    double hex = 0;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_zero
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%.5g";
    double hex = 0;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_mantissa
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%g";
    double hex = 0.0000005;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_mantissa_flags
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%5.8g";
    double hex = 0.0000005;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_short_no_mantissa
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%g";
    double hex = 0.005;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test LG
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%LG";
    long double hex = 0.000005;

    int ret_exp = sprintf(exp, format, hex);
    int ret_res = s21_sprintf(res, format, hex);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


#test g_many
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char format[] = "%LG %g %G %Lg %.5g";
    long double hex = 0.000005;
    double hex1 = 41.1341;
    double hex2 = 848.9000;
    long double hex3 = 0.0843;
    double hex4 = 0.0005;
    double hex5 = 0.8481481;

    int ret_exp = sprintf(exp, format, hex, hex1, hex2, hex3, hex4, hex5);
    int ret_res = s21_sprintf(res, format, hex, hex1, hex2, hex3, hex4, hex5);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


/* not necessary to implement
test wide_char
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "This is ret_res simple wide char %lc";
    unsigned long w = L'汉';

    int ret_exp = sprintf(exp, format, w);
    int ret_res = s21_sprintf(res, format, w);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


test width_char
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "This is ret_res simple wide char %5c";
    char w = L'森';

    int ret_exp = sprintf(exp, format, w);
    int ret_res = s21_sprintf(res, format, w);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


test minus_wide_char
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "This is ret_res simple wide char %-5lc";
    unsigned long w = L'森';

    int ret_exp = sprintf(exp, format, w);
    int ret_res = s21_sprintf(res, format, w);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


test wide_string
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "This is ret_res simple wide char %ls";
    wchar_t w[] = L"森我爱菠萝";

    int ret_exp = sprintf(exp, format, w);
    int ret_res = s21_sprintf(res, format, w);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


test wide_string1
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "This is ret_res simple wide char %5.12ls";
    wchar_t w[] = L"森我爱菠萝";

    int ret_exp = sprintf(exp, format, w);
    int ret_res = s21_sprintf(res, format, w);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


test wide_string2
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "This is ret_res simple wide char %120ls ABOBA";
    wchar_t w[] = L"森我爱菠萝";

    int ret_exp = sprintf(exp, format, w);
    int ret_res = s21_sprintf(res, format, w);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);


test wide_string3
    char exp[BUFF_SIZE];
    char res[BUFF_SIZE];
    char *format = "This is ret_res simple wide char %-43ls";
    wchar_t w[] = L"森我爱菠萝";

    int ret_exp = sprintf(exp, format, w);
    int ret_res = s21_sprintf(res, format, w);
    ck_assert_str_eq(exp, res);
    ck_assert_int_eq(ret_exp, ret_res);
*/